Definir Alfa CUR_R024CAR;
Definir Alfa aMsgRet;
Definir Alfa aSqlAux;
Definir Alfa aCodCar;
Definir Alfa aArqCri;
Definir Alfa aArqExt;
Definir Alfa aCarAlf;
Definir Alfa aCarCom;
Definir Alfa aCarMap;
Definir Alfa aCnhObr;
Definir Alfa aCodCar;
Definir Alfa aCodCb2;
Definir Alfa aCodCbo;
Definir Alfa aCodSig;
Definir Alfa aDesSum;
Definir Alfa aFamCar;
Definir Alfa aGraCpx;
Definir Alfa aNomArq;
Definir Alfa aOclObr;
Definir Alfa aSupIm2;
Definir Alfa aSupIme;
Definir Alfa aTitCar;
Definir Alfa aTitRed;

Definir Data dDatCri;
Definir Data dDatExt;

Definir Numero nNumEmp;



aMsgRet = "OK";
aSqlAux = "";



@ -- Esee cursor está dando erro ao depurar - "Erro ao abrir Cursor" -- @ 
@ -- Obs.: Criei outro cursor para testar e funcionou corretamente, está comentdo no final da regra -- @
aSqlAux = "SELECT estcar, codcar, titred, titcar, caralf, \
                  codhie, supime, supim2, codcbo, hormes, \
                  siscar, natdes, dessum, datcri, datext, \
                  gracpx, nivcar, perfnc, nomarq, codsig, \
                  codcb2, carcom, carmap, areatu, arqcri, \
                  arqext, codhwf, oclobr, cnhobr, tipmot, \
                  usu_famcar, usu_codfam                  \
             FROM R024CAR                                 \
             ORDER BY EstCar, CodCar";                                                                   
            

SQL_Criar(CUR_R024CAR);
SQL_UsarSQLSenior2(CUR_R024CAR, 0);
SQL_UsarAbrangencia(CUR_R024CAR, 0);
SQL_DefinirComando(CUR_R024CAR, aSqlAux); 

SQL_AbrirCursor(CUR_R024CAR);
Enquanto(SQL_EOF(CUR_R024CAR) = 0)
{ 
  aArqCri = "";
  aArqExt = "";
  aCarAlf = "";
  aCarCom = "";
  aCarMap = "";
  aCnhObr = "";
  aCodCar = "";
  aCodCb2 = "";
  aCodCbo = "";
  aCodSig = "";
  aDesSum = "";
  aFamCar = "";
  aGraCpx = "";
  aNomArq = "";
  aOclObr = "";
  aSupIm2 = "";
  aSupIme = "";
  aTitCar = "";
  aTitRed = "";
  
  dDatCri = 0;
  dDatExt = 0;
  
  nAreAtu = 0;
  nCodHie = 0;
  nCodHwf = 0;
  nEstCar = 0;
  nHorMes = 0;
  nNatDes = 0;
  nNivCar = 0;
  nPerFnc = 0;
  nSisCar = 0;
  nCodFam = 0;
  nTipMot = 0;
     
  SQL_RetornarAlfa(CUR_R024CAR, "arqcri",	aArqcri);
  SQL_RetornarAlfa(CUR_R024CAR, "arqext",	aArqext);
  SQL_RetornarAlfa(CUR_R024CAR, "caralf",	aCaralf);
  SQL_RetornarAlfa(CUR_R024CAR, "carcom",	aCarcom);
  SQL_RetornarAlfa(CUR_R024CAR, "carmap",	aCarmap);
  SQL_RetornarAlfa(CUR_R024CAR, "cnhobr",	aCnhObr);
  SQL_RetornarAlfa(CUR_R024CAR, "codcar",	aCodCar);
  SQL_RetornarAlfa(CUR_R024CAR, "codcb2",	aCodCb2);
  SQL_RetornarAlfa(CUR_R024CAR, "codcbo",	aCodCbo);
  SQL_RetornarAlfa(CUR_R024CAR, "codsig",	aCodSig);
  SQL_RetornarAlfa(CUR_R024CAR, "dessum",	aDesSum);
  SQL_RetornarAlfa(CUR_R024CAR, "usu_famcar", aFamCar);
  SQL_RetornarAlfa(CUR_R024CAR, "gracpx",	aGraCpx);
  SQL_RetornarAlfa(CUR_R024CAR, "nomarq",	aNomArq);
  SQL_RetornarAlfa(CUR_R024CAR, "oclobr",	aOclObr);
  SQL_RetornarAlfa(CUR_R024CAR, "supim2",	aSupIm2);
  SQL_RetornarAlfa(CUR_R024CAR, "supime",	aSupIme);
  SQL_RetornarAlfa(CUR_R024CAR, "titcar",	aTitCar);
  SQL_RetornarAlfa(CUR_R024CAR, "titred",	aTitRed);
  
  SQL_RetornarData(CUR_R024CAR, "datcri",	dDatCri);
  SQL_RetornarData(CUR_R024CAR, "datext",	dDatExt);
  
  SQL_RetornarInteiro(CUR_R024CAR, "areatu", nAreAtu);
  SQL_RetornarInteiro(CUR_R024CAR, "codhie", nCodHie);
  SQL_RetornarInteiro(CUR_R024CAR, "codhwf", nCodHwf);
  SQL_RetornarInteiro(CUR_R024CAR, "estcar", nEstCar);
  SQL_RetornarInteiro(CUR_R024CAR, "hormes", nHorMes);
  SQL_RetornarInteiro(CUR_R024CAR, "natdes", nNatDes);
  SQL_RetornarInteiro(CUR_R024CAR, "nivcar", nNivCar);
  SQL_RetornarInteiro(CUR_R024CAR, "perfnc", nPerFnc);
  SQL_RetornarInteiro(CUR_R024CAR, "siscar", nSisCar);
  SQL_RetornarInteiro(CUR_R024CAR, "usu_codfam", nCodFam);
  SQL_RetornarInteiro(CUR_R024CAR, "tipmot", nTipMot);
  
  cargo.retorno.CriarLinha();
  cargo.retorno.estcar = nEstCar;
  cargo.retorno.codcar = aCodCar;
  cargo.retorno.titred = aTitRed;
  cargo.retorno.titcar = aTitCar;
  cargo.retorno.caralf = aCarAlf;
  cargo.retorno.codhie = nCodHie;
  cargo.retorno.supime = aSupIme;
  cargo.retorno.supim2 = aSupIm2;
  cargo.retorno.codcbo = aCodCbo;
  cargo.retorno.hormes = nHorMes;
  cargo.retorno.siscar = nSisCar;
  cargo.retorno.natdes = nNatDes;
  cargo.retorno.dessum = aDesSum;
  cargo.retorno.datcri = dDatCri;
  cargo.retorno.datext = dDatExt;
  cargo.retorno.gracpx = aGraCpx;
  cargo.retorno.nivcar = nNivCar;
  cargo.retorno.perfnc = nPerFnc;
  cargo.retorno.nomarq = aNomArq;
  cargo.retorno.codsig = aCodSig;
  cargo.retorno.codcb2 = aCodCb2;
  cargo.retorno.carcom = aCarCom;
  cargo.retorno.carmap = aCarMap;
  cargo.retorno.areatu = nAreAtu;
  cargo.retorno.arqcri = aArqCri;
  cargo.retorno.arqext = aArqExt;
  cargo.retorno.codhwf = nCodHwf;
  cargo.retorno.oclobr = aOclObr;
  cargo.retorno.cnhobr = aCnhObr;
  cargo.retorno.tipmot = nTipMot;
  cargo.retorno.usu_famcar = aFamCar;
  cargo.retorno.usu_codfam = nCodFam;
  
  SQL_Proximo(CUR_R024CAR);  
}
SQL_FecharCursor(CUR_R024CAR);
SQL_Destruir(CUR_R024CAR);  

FinalRegra:

cargo.execucao = aMsgRet;



@ ----- Cursor de teste -------- @

/*Definir Cursor C24CAR;
C24CAR.SQL"SELECT estcar, codcar, titred, titcar, caralf, \
                  codhie, supime, supim2, codcbo, hormes, \
                  siscar, natdes, dessum, datcri, datext, \
                  gracpx, nivcar, perfnc, nomarq, codsig, \
                  codcb2, carcom, carmap, areatu, arqcri, \
                  arqext, codhwf, oclobr, cnhobr, tipmot, \
                  usu_famcar, usu_codfam                  \
             FROM R024CAR";
C24CAR.AbrirCursor()
Enquanto(C24CAR.Achou){
  
  aArqCri = "";
  aArqExt = "";
  aCarAlf = "";
  aCarCom = "";
  aCarMap = "";
  aCnhObr = "";
  aCodCar = "";
  aCodCb2 = "";
  aCodCbo = "";
  aCodSig = "";
  aDesSum = "";
  aFamCar = "";
  aGraCpx = "";
  aNomArq = "";
  aOclObr = "";
  aSupIm2 = "";
  aSupIme = "";
  aTitCar = "";
  aTitRed = "";
  
  dDatCri = 0;
  dDatExt = 0;
  
  nAreAtu = 0;
  nCodHie = 0;
  nCodHwf = 0;
  nEstCar = 0;
  nHorMes = 0;
  nNatDes = 0;
  nNivCar = 0;
  nPerFnc = 0;
  nSisCar = 0;
  nCodFam = 0;
  nTipMot = 0;
  
  
  aArqcri = C24CAR.arqcri;
  aArqext = C24CAR.arqext;
  aCaralf = C24CAR.caralf;
  aCarcom = C24CAR.carcom;
  aCarmap = C24CAR.carmap;
  aCnhObr = C24CAR.cnhobr;
  aCodCar = C24CAR.codcar;
  aCodCb2 = C24CAR.codcb2;
  aCodCbo = C24CAR.codcbo;
  aCodSig = C24CAR.codsig;
  aDesSum = C24CAR.dessum;
  aFamCar = C24CAR.usu_famcar;
  aGraCpx = C24CAR.gracpx;
  aNomArq = C24CAR.nomarq;
  aOclObr = C24CAR.oclobr;
  aSupIm2 = C24CAR.supim2;
  aSupIme = C24CAR.supime;
  aTitCar = C24CAR.titcar;
  aTitRed = C24CAR.titred;
  dDatCri = C24CAR.datcri;
  dDatExt = C24CAR.datext;
  nAreAtu = C24CAR.areatu;
  nCodHie = C24CAR.codhie;
  nCodHwf = C24CAR.codhwf;
  nEstCar = C24CAR.estcar;
  nHorMes = C24CAR.hormes;
  nNatDes = C24CAR.natdes;
  nNivCar = C24CAR.nivcar;
  nPerFnc = C24CAR.perfnc;
  nSisCar = C24CAR.siscar;
  nCodFam = C24CAR.usu_codfam;
  nTipMot = C24CAR.tipmot;
  
  
  cargo.retorno.CriarLinha();
  cargo.retorno.estcar = nEstCar;
  cargo.retorno.codcar = aCodCar;
  cargo.retorno.titred = aTitRed;
  cargo.retorno.titcar = aTitCar;
  cargo.retorno.caralf = aCarAlf;
  cargo.retorno.codhie = nCodHie;
  cargo.retorno.supime = aSupIme;
  cargo.retorno.supim2 = aSupIm2;
  cargo.retorno.codcbo = aCodCbo;
  cargo.retorno.hormes = nHorMes;
  cargo.retorno.siscar = nSisCar;
  cargo.retorno.natdes = nNatDes;
  cargo.retorno.dessum = aDesSum;
  cargo.retorno.datcri = dDatCri;
  cargo.retorno.datext = dDatExt;
  cargo.retorno.gracpx = aGraCpx;
  cargo.retorno.nivcar = nNivCar;
  cargo.retorno.perfnc = nPerFnc;
  cargo.retorno.nomarq = aNomArq;
  cargo.retorno.codsig = aCodSig;
  cargo.retorno.codcb2 = aCodCb2;
  cargo.retorno.carcom = aCarCom;
  cargo.retorno.carmap = aCarMap;
  cargo.retorno.areatu = nAreAtu;
  cargo.retorno.arqcri = aArqCri;
  cargo.retorno.arqext = aArqExt;
  cargo.retorno.codhwf = nCodHwf;
  cargo.retorno.oclobr = aOclObr;
  cargo.retorno.cnhobr = aCnhObr;
  cargo.retorno.tipmot = nTipMot;
  cargo.retorno.usu_famcar = aFamCar;
  cargo.retorno.usu_codfam = nCodFam;  
}
C24CAR.Proximo();
C24CAR.FecharCursor();

@ -- Condição para retorno -- @
Se((nEstCar <> 0) e (aCodCar <> "")){
  aMsgRet = "OK";
}
Senao {
  aMsgRet = "Ocorreu um erro ao executar o WS, favor verificar!";
}

FinalRegra:

cargo.execucao = aMsgRet;    */