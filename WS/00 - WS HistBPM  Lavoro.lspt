@-- Definir web services internos --@
Definir interno.com.senior.g5.rh.fp.historicos.Cargo_2 wsAlterarCargo;
Definir interno.com.senior.g5.rh.fp.historicos.CentroCusto wsAlterarCentroCusto;
Definir interno.com.senior.g5.rh.fp.historicos.Posto_4 wsAlterarPosto;
Definir interno.com.senior.g5.rh.fp.historicos.Salario_2 wsAlterarSalario;
Definir interno.com.senior.g5.rh.fp.histBPM.alterarFilial_1 wsAlterarFilial;
   

Definir Alfa CUR_R034FUN;


Definir Data dDatAlt;
Definir Data dIniAtu;
Definir Data dDatDis;

@-- Definir variáveis numéricas --@
Definir Numero nCplEst;
Definir Numero nCplSal;
Definir Numero nSalEst;
Definir Numero nValSal;
Definir Numero nValSalAux;
Definir Numero nAdmeSo;
Definir Numero nCodBHr;
Definir Numero nCodCat;
Definir Numero nCodCrr;
Definir Numero nCodEqp;
Definir Numero nCodEsc;
Definir Numero nCodEst;
Definir Numero nCodIdm;
Definir Numero nCodMot;
Definir Numero nCodMotCar;
Definir Numero nCodMotSal;
Definir Numero nCodMts;
Definir Numero nCodSin;
Definir Numero nCodTap;
Definir Numero nCodTma;
Definir Numero nCodVin;
Definir Numero nConFin;
Definir Numero nFicReg;
Definir Numero nHorBas;
Definir Numero nHorSab;
Definir Numero nMotPos;
Definir Numero nNatDes;
Definir Numero nNovCad;
Definir Numero nNovEmp;
Definir Numero nNovFil;
Definir Numero nNumCad;
Definir Numero nNumEmp;
Definir Numero nQtdConf;
Definir Numero nSeqAlt;
Definir Numero nTipAdm;
Definir Numero nTipCol;
Definir Numero nTipSal;
Definir Numero nTraBHr;
Definir Numero nTurInt;
Definir Numero nHorDsr;
Definir Numero nHorSem;
Definir Numero nDia;
Definir Numero nMes;
Definir Numero nAno;



@-- Definir variáveis alfanuméricas --@
Definir Alfa aCarVag;
Definir Alfa aClaSal;
Definir Alfa aCodCCu;
Definir Alfa aCodCcuAtual;
Definir Alfa aCodCar;
Definir Alfa aCodCarAtual;
Definir Alfa aConTov;
Definir Alfa aExcHis;
Definir Alfa aFunEso;
Definir Alfa aNivSal;
Definir Alfa aNumCra;
Definir Alfa aNumLoc;
Definir Alfa aObsPos;
Definir Alfa aPosTra;
Definir Alfa aPosTraAtual;
Definir Alfa aSocSin;
Definir Alfa aTipOpe;
Definir Alfa aTipOpeBPM;
Definir Alfa aDatAlt;
Definir Alfa aIniAtu;
Definir Alfa aDatDis;
Definir Alfa aAno;
Definir Alfa aMes;
Definir Alfa aDia;
Definir Alfa aAuxDat;
Definir Alfa aEscalonamentoStr;
Definir Alfa aEscalonamentoStrAux;
Definir Alfa aEscalonamentoStrAuxCopy;
Definir Alfa aEscalonamento;
Definir Alfa aPorcentagem;
Definir Alfa aEscalValor;
Definir Alfa aSearchStr;
Definir Alfa aSqlAux;
Definir Alfa aMensagemWsAlterarCargo;
Definir Alfa aMensagemWsAlterarCargoNat;
Definir Alfa aMensagemWsAlterarCentroCusto;
Definir Alfa aMensagemWsAlterarCentroCustoNat;
Definir Alfa aMensagemWsAlterarPosto;
Definir Alfa aMensagemWsAlterarPostoNat;
Definir Alfa aMensagemWsAlterarSalario;
Definir Alfa aMensagemWsAlterarSalarioNat;
Definir Alfa aMensagemWsAlterarFilial;
Definir Alfa aMensagemWsAlterarFilialNat;



@-- Definir funções --@
Definir Funcao fEntrarDados();
Definir Funcao fCorrigirData();
Definir Funcao fAlterarCargo();
Definir Funcao fAlterarCentroCusto();
Definir Funcao fAlterarPosto();
Definir Funcao fAlterarSalario();
Definir Funcao fEscalonamentoSal();
Definir Funcao fAlterarFilial();
Definir Funcao fBuscarDadosAtuais();
Definir Funcao fEncerraPosto(); @ Evanderson Pereira - 21/04/2025 @


@-- Fluxo --@
fEntrarDados();
fCorrigirData();

Se(aTipOpeBPM = "Promoção"){
  fBuscarDadosAtuais();
  fEncerraPosto(); @ Chama a função para verifcar condição de encerramento do posto - Evanderson @
  
  Se(aPostra <> aPosTraAtual) {
    fAlterarPosto();
  }
  
  Se (aPosTra = aPosTraAtual) {
    Se((aCodCar <> aCodCarAtual) e (aCodCar <> "")){
      fAlterarCargo();
    }
    Se((aCodCcu <> aCodCcuAtual) e (aCodCcu <> "")){
      fAlterarCentroCusto();
    }
    Se(aEscalonamento = "Sim") {
      fEscalonamentoSal();
    }
    Senao {
      fAlterarSalario();
    }  
  }
}


Se (aTipOpeBPM = "Enquadramento Salarial") {
  fEncerraPosto(); @ Chama a função para verifcar condição de encerramento do posto - Evanderson @

  Se (aEscalonamento = "Sim") {
    fEscalonamentoSal();
  } 
  Senao {
    fAlterarSalario();
  }
}

Se (aTipOpeBPM = "Mérito") {
  /*fAlterarCentroCusto(); */ @Comentado dia 20-09, não tem mais indicação de CCU dentro do BPM@
  fEncerraPosto(); @ Chama a função para verifcar condição de encerramento do posto - Evanderson @

  Se (aEscalonamento = "Sim"){
    fEscalonamentoSal();
  }
  Senao{
    fAlterarSalario();
  }
}

Se (aTipOpeBPM = "Mudança de Cargo") {
  fBuscarDadosAtuais();
  fEncerraPosto(); @ Chama a função para verifcar condição de encerramento do posto - Evanderson @
  
  Se (aPostra <> aPosTraAtual){ @incluido dia 16-10, pois pode ter Alt. Posto@
    fAlterarPosto();
  }
  Se (aPosTra = aPosTraAtual) {
    Se ((aCodCar <> aCodCarAtual) e (aCodCar <> "")){
      fAlterarCargo();
    }
    Se ((aCodCcu <> aCodCcuAtual) e (aCodCcu <> "")){
      fAlterarCentroCusto();
    }
  }
    
  Se (nValSal <> 0) { @incluido dia 20-09, pois pode ter Alt. Salário@
    fAlterarSalario();
  }
}


Se (aTipOpeBPM = "Transferência") {
  fAlterarPosto();  
  fAlterarFilial();
  fEncerraPosto(); @ Chama a função para verifcar condição de encerramento do posto - Evanderson @

  Se (aEscalonamento = "Sim") {
    fEscalonamentoSal();
  }  
  Senao {
    fAlterarSalario();
  }
}



@-- Função para entrada de dados da porta --@
Funcao fEntrarDados();
{
    aDatAlt = IntegrarBPM.datAlt;
    aDatDis = IntegrarBPM.datDis;
    aIniAtu = IntegrarBPM.iniAtu;
    nCplSal = IntegrarBPM.cplSal;
    nValSal = IntegrarBPM.valSal;
    nAdmeSo = IntegrarBPM.admeSo;
    nCodBHr = IntegrarBPM.codBHr;
    nCodEsc = IntegrarBPM.codEsc;
    nCodEst = IntegrarBPM.codEst;
    nCodMot = IntegrarBPM.codMot;
    nCodMotCar = IntegrarBPM.codMotCar;
    nCodMotSal = IntegrarBPM.codMotSal;
    nCodMts = IntegrarBPM.codMts;
    nCodSin = IntegrarBPM.codSin;
    nCodTap = IntegrarBPM.codTap;
    nCodTma = IntegrarBPM.codTma;
    nCodVin = IntegrarBPM.codVin;
    nFicReg = IntegrarBPM.ficReg;
    nHorBas = IntegrarBPM.horBas;
    nHorSab = IntegrarBPM.horSab;
    nMotPos = IntegrarBPM.motPos;
    nNatDes = IntegrarBPM.natDes;
    nNovCad = IntegrarBPM.novCad;
    nNovEmp = IntegrarBPM.novEmp;
    nNovFil = IntegrarBPM.novFil;
    nNumCad = IntegrarBPM.numCad;
    nNumEmp = IntegrarBPM.numEmp;
    nSeqAlt = IntegrarBPM.seqAlt;
    nTipAdm = IntegrarBPM.tipAdm;
    nTipCol = IntegrarBPM.tipCol;
    nTipSal = IntegrarBPM.tipSal;
    nTraBHr = IntegrarBPM.traBHr;
    aClaSal = IntegrarBPM.claSal;
    aCodCCu = IntegrarBPM.codCCu;
    aCodCar = IntegrarBPM.codCar;
    aConTov = IntegrarBPM.conTov;
    aNivSal = IntegrarBPM.nivSal;
    aNumCra = IntegrarBPM.numCra;
    aNumLoc = IntegrarBPM.numLoc;
    aPosTra = IntegrarBPM.posTra;
    aSocSin = IntegrarBPM.socSin;
    aTipOpe = IntegrarBPM.tipOpe;
    aExtPos = IntegrarBPM.ExtPos;
    aTipOpeBPM = IntegrarBPM.tipOpeBPM;
    aEscalonamentoStr = IntegrarBPM.escalonamentoStr;
    aEscalonamento = IntegrarBPM.escalonamento;

    @nCplEst = IntegrarBPM.cplEst;@
    @nSalEst = IntegrarBPM.salEst;@
    @nCodCat = IntegrarBPM.codCat;@
    @nCodCrr = IntegrarBPM.codCrr;@
    @nCodEqp = IntegrarBPM.codEqp;@
    @nCodIdm = IntegrarBPM.codIdm;@
    @nConFin = IntegrarBPM.conFin;@
    @nQtdConf = IntegrarBPM.qtdConf;@
    @nTurInt = IntegrarBPM.turInt;@
    @aCarVag = IntegrarBPM.carVag;@
    @aExcHis = IntegrarBPM.excHis;@
    @aFunEso = IntegrarBPM.funEso;@
    @aObsPos = IntegrarBPM.obsPos;@
    @nHorDsr = IntegrarBPM.horDsr;@
    @nHorSem = IntegrarBPM.horSem;@
    

    Se (aDatAlt <> "") {
        aAuxDat = aDatAlt;
        CopiarAlfa (aAuxDat, 1, 4);
        aAno = aAuxDat;
        aAuxDat = aDatAlt;
        CopiarAlfa (aAuxDat, 6, 2);
        aMes = aAuxDat;
        aAuxDat = aDatAlt;
        CopiarAlfa (aAuxDat, 9, 2);
        aDia = aAuxDat;
        AlfaParaInt (aAno, nAno);
        AlfaParaInt (aMes, nMes);
        AlfaParaInt (aDia, nDia);
        MontaData (nDia, nMes, nAno, dDatAlt);
    }

    Se (aDatDis <> "") {
        aAuxDat = aDatDis;
        CopiarAlfa (aAuxDat, 1, 4);
        aAno = aAuxDat;
        aAuxDat = aDatDis;
        CopiarAlfa (aAuxDat, 6, 2);
        aMes = aAuxDat;
        aAuxDat = aDatDis;
        CopiarAlfa (aAuxDat, 9, 2);
        aDia = aAuxDat;
        AlfaParaInt (aAno, nAno);
        AlfaParaInt (aMes, nMes);
        AlfaParaInt (aDia, nDia);
        MontaData (nDia, nMes, nAno, dDatDis);
    }
    
    Se (aIniAtu <> "") {
        aAuxDat = aIniAtu;
        CopiarAlfa (aAuxDat, 1, 4);
        aAno = aAuxDat;
        aAuxDat = aIniAtu;
        CopiarAlfa (aAuxDat, 6, 2);
        aMes = aAuxDat;
        aAuxDat = aIniAtu;
        CopiarAlfa (aAuxDat, 9, 2);
        aDia = aAuxDat;
        AlfaParaInt (aAno, nAno);
        AlfaParaInt (aMes, nMes);
        AlfaParaInt (aDia, nDia);
        MontaData (nDia, nMes, nAno, dIniAtu);
    }
}



@-- Função para corrigir data --@
Funcao fCorrigirData();
{
  ConverteMascara(3, dDatAlt, aDatAlt, "DD-MM-YYYY");
  ConverteMascara(3, dIniAtu, aIniAtu, "DD-MM-YYYY");

  Se (aDatAlt <> "00-00-0000") {
    DesmontaData(dDatAlt, nDia, nMes, nAno);
    Se (nDia > 20) {
      nDia = 1;
      nMes = nMes + 1;

      Se (nMes = 13) {
        nMes = 1;
        nAno = nAno + 1;
      }
    }
    
    Senao {
      nDia = 1;
      nMes = nMes;
      Se (nMes > 12) {
        nMes = 1;
        nAno = nAno + 1;
      }
    }

    MontaData(nDia, nMes, nAno, dDatAlt);
    ConverteMascara(3, dDatAlt, aDatAlt, "DD-MM-YYYY");
  }

  Se (aIniAtu <> "00-00-0000") {
    DesmontaData(dIniAtu, nDia, nMes, nAno);
    Se (nDia > 20){
      nDia = 1;
      nMes = nMes + 1;
      
      Se (nMes > 12){
        nMes = 1;
        nAno = nAno + 1;
      }
    }
    
    Senao {
      nDia = 1;
    }
        
    MontaData(nDia, nMes, nAno, dIniAtu);
    ConverteMascara(3, dIniAtu, aIniAtu, "DD-MM-YYYY");
  }
}


@-- Função para alterar cargo --@
Funcao fAlterarCargo();
{

  wsAlterarCargo.numEmp = nNumEmp;
  wsAlterarCargo.tipCol = nTipCol;
  wsAlterarCargo.numCad = nNumCad;
  wsAlterarCargo.datAlt = dDatAlt;
  wsAlterarCargo.codCar = aCodCar;
  wsAlterarCargo.codMot = nCodMotCar;
  wsAlterarCargo.tipOpe = aTipOpe;

  wsAlterarCargo.ModoExecucao = 2;
  wsAlterarCargo.Executar();
    
  aMensagemWsAlterarCargo = wsAlterarCargo.erroExecucao;

  Se (aMensagemWsAlterarCargo = ""){
    IntegrarBPM.msgRetWsSucessoAlterarCargo = "Histórico de cargo inserido com sucesso!";
  }
  Senao {
    IntegrarBPM.MsgRetWsAlterarCargoNat = aMensagemWsAlterarCargo;
    aSearchStr = "Registro já existe";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarCargo, nPosicaoExiste);
    Se ((nPosicaoExiste = 0) e (aMensagemWsAlterarCargo <> "")){
      IntegrarBPM.erroExecucao = aMensagemWsAlterarCargo;
    }
  }

  /*aMensagemWsAlterarCargo = wsAlterarCargo.MsgRetWsSucesso;
  IntegrarBPM.msgRetWsSucessoAlterarCargo = aMensagemWsAlterarCargo;
  aMensagemWsAlterarCargoNat = wsAlterarCargo.MsgRetWsAlterarCargo;
  IntegrarBPM.msgRetWsAlterarCargoNat = aMensagemWsAlterarCargoNat;
  
  aSearchStr = "sucesso";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarCargo, nPosicao);
  aSearchStr = "Registro já existe";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarCargoNat, nPosicaoExiste);
  Se (((nPosicao = 0) e (nPosicaoExiste = 0)) e (aMensagemWsAlterarCargoNat <> ""))
  {
      IntegrarBPM.erroExecucao = aMensagemWsAlterarCargoNat;
  }   */
    
}


@-- Função para alterar centro de custo --@
Funcao fAlterarCentroCusto();
{
  wsAlterarCentroCusto.datAlt = dDatAlt;
  wsAlterarCentroCusto.numCad = nNumCad;
  wsAlterarCentroCusto.numEmp = nNumEmp;
  wsAlterarCentroCusto.tipCol = nTipCol;
  wsAlterarCentroCusto.codCCu = aCodCCu;
  wsAlterarCentroCusto.tipOpe = aTipOpe;

  wsAlterarCentroCusto.ModoExecucao = 2;
  wsAlterarCentroCusto.Executar();
    
  aMensagemWsAlterarCentroCusto = wsAlterarCentroCusto.erroExecucao;

  Se (aMensagemWsAlterarCentroCusto = "") {
    IntegrarBPM.msgRetWsAlterarCentroCustoNat = "Histórico de Centro de Custo inserido com sucesso!";
  }
  Senao {
    IntegrarBPM.msgRetWsAlterarCentroCustoNat = aMensagemWsAlterarCentroCusto;
    aSearchStr = "sucesso";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCusto, nPosicao);
    aSearchStr = "Centro de Custo informado igual ao anterior";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCustoNat, nPosicaoExiste);
    aSearchStr = "Registro já existe";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCustoNat, nPosicaoExiste);
    Se (((nPosicao = 0) e (nPosicaoExiste = 0)) e (aMensagemWsAlterarCentroCustoNat <> "")) {
      IntegrarBPM.erroExecucao = aMensagemWsAlterarCentroCustoNat;
    }
  }

  /*aMensagemWsAlterarCentroCusto = wsAlterarCentroCusto.MsgRetWsSucesso;
  IntegrarBPM.msgRetWsSucessoAlterarCentroCusto = aMensagemWsAlterarCentroCusto;
  aMensagemWsAlterarCentroCustoNat = wsAlterarCentroCusto.MsgRetwsAlterarCentroCusto;
  IntegrarBPM.msgRetWsAlterarCentroCustoNat = aMensagemWsAlterarCentroCustoNat;
  
  aSearchStr = "sucesso";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCusto, nPosicao);
  aSearchStr = "Centro de Custo informado igual ao anterior";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCustoNat, nPosicaoExiste);
  aSearchStr = "Registro já existe";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarCentroCustoNat, nPosicaoExiste);
  Se (((nPosicao = 0) e (nPosicaoExiste = 0)) e (aMensagemWsAlterarCentroCustoNat <> ""))
  {
      IntegrarBPM.erroExecucao = aMensagemWsAlterarCentroCustoNat;
  }   */

}


@-- Função para alterar posto --@
Funcao fAlterarPosto();
{
  wsAlterarPosto.tipOpe = aTipOpe;
  wsAlterarPosto.numEmp = nNumEmp;
  wsAlterarPosto.tipCol = nTipCol;
  wsAlterarPosto.numCad = nNumCad;
  wsAlterarPosto.iniAtu = dIniAtu;
  wsAlterarPosto.posTra = aPosTra;
  wsAlterarPosto.motPos = nMotPos;
  @wsAlterarPosto.codCar = aCodCar;@
  @sAlterarPosto.carVag = aCarVag;@
    
  wsAlterarPosto.ModoExecucao = 2;
  wsAlterarPosto.Executar();
    
  aMensagemWsAlterarPosto = wsAlterarPosto.erroExecucao;

  Se (aMensagemWsAlterarPosto = "") {
    IntegrarBPM.msgRetWsSucessoAlterarPosto = "Histórico de posto inserido com sucesso!";
  }
  Senao {
    IntegrarBPM.MsgRetWsAlterarPostoNat = aMensagemWsAlterarPosto;
    aSearchStr = "FR038HSI - Histórico Sindicato";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarPosto, nPosicaoExiste1);
    aSearchStr = "Registro já existe";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarPosto, nPosicaoExiste2);
    aSearchStr = "CBAltPosto";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarPosto, nPosicaoExiste3);
    Se ((nPosicaoExiste1 = 0) e (nPosicaoExiste2 = 0) e (nPosicaoExiste3 = 0) e (aMensagemWsAlterarPosto <> "")){
      IntegrarBPM.erroExecucao = aMensagemWsAlterarPosto;
    }   
  }
}


@-- Função para alterar salário --@
Funcao fAlterarSalario();
{
  wsAlterarSalario.numEmp = nNumEmp;
  wsAlterarSalario.tipCol = nTipCol;
  wsAlterarSalario.numCad = nNumCad;
  wsAlterarSalario.datAlt = dDatAlt;
  wsAlterarSalario.seqAlt = nSeqAlt;
  wsAlterarSalario.codMot = nCodMotSal;
  wsAlterarSalario.datDis = dDatDis;
  wsAlterarSalario.tipSal = nTipSal;
  wsAlterarSalario.codEst = nCodEst;
  wsAlterarSalario.claSal = aClaSal;
  wsAlterarSalario.nivSal = aNivSal;
  wsAlterarSalario.valSal = nValSal;
  wsAlterarSalario.tipOpe = aTipOpe
  
  @wsAlterarSalario.cplEst = nCplEst;@
  @wsAlterarSalario.cplSal = nCplSal;@
  @wsAlterarSalario.salEst = nSalEst;@
  @wsAlterarSalario.codIdm = nCodIdm;@

  wsAlterarSalario.ModoExecucao = 2;
  wsAlterarSalario.Executar();
  
  aMensagemWsAlterarSalario = wsAlterarSalario.erroExecucao;

  Se (aMensagemWsAlterarSalario = "") {
    IntegrarBPM.msgRetWsSucessoAlterarSalario = "Histórico de salário inserido com sucesso!";
  }
  Senao {
    IntegrarBPM.MsgRetWsAlterarSalarioNat = aMensagemWsAlterarSalario;
    aSearchStr = "Registro já existe";
    PosicaoAlfa(aSearchStr, aMensagemWsAlterarSalario, nPosicaoExiste);
    Se ((nPosicaoExiste = 0) e (aMensagemWsAlterarSalario <> "")) {
      IntegrarBPM.erroExecucao = aMensagemWsAlterarSalario;
    }
  }
}


@-- Função para alterar filial --@
Funcao fAlterarFilial();
{
  wsAlterarFilial.datAlt = dDatAlt;
  wsAlterarFilial.cplSal = nCplSal;
  wsAlterarFilial.valSal = nValSal;
  wsAlterarFilial.admeSo = nAdmeSo;
  wsAlterarFilial.codBHr = nCodBHr;
  wsAlterarFilial.codEsc = nCodEsc;
  wsAlterarFilial.codEst = nCodEst;
  wsAlterarFilial.codMot = nCodMot;
  wsAlterarFilial.codMts = nCodMts;
  wsAlterarFilial.codSin = nCodSin;
  wsAlterarFilial.codTap = nCodTap;
  wsAlterarFilial.codTma = nCodTma;
  wsAlterarFilial.codVin = nCodVin;
  wsAlterarFilial.ficReg = nFicReg;
  wsAlterarFilial.horBas = nHorBas;
  wsAlterarFilial.horSab = nHorSab;
  wsAlterarFilial.motPos = nMotPos;
  wsAlterarFilial.natDes = nNatDes;
  wsAlterarFilial.novCad = nNovCad;
  wsAlterarFilial.novEmp = nNovEmp;
  wsAlterarFilial.novFil = nNovFil;
  wsAlterarFilial.numCad = nNumCad;
  wsAlterarFilial.numEmp = nNumEmp;
  wsAlterarFilial.tipAdm = nTipAdm;
  wsAlterarFilial.tipCol = nTipCol;
  wsAlterarFilial.tipSal = nTipSal;
  wsAlterarFilial.traBHr = nTraBHr;
  wsAlterarFilial.claSal = aClaSal;
  wsAlterarFilial.codCcu = aCodCcu;
  wsAlterarFilial.conTov = aConTov;
  wsAlterarFilial.nivSal = aNivSal;
  wsAlterarFilial.numCra = aNumCra;
  wsAlterarFilial.numLoc = aNumLoc;
  wsAlterarFilial.socSin = aSocSin;
  wsAlterarFilial.tipOpe = aTipOpe;

  wsAlterarFilial.ModoExecucao = 1;
  wsAlterarFilial.Executar();

  aMensagemWsAlterarFilial = wsAlterarFilial.MsgRetWsSucesso;
  IntegrarBPM.msgRetWsSucessoAlterarFilial = aMensagemWsAlterarFilial;
  aMensagemWsAlterarFilialNat = wsAlterarFilial.MsgRetWsAlterarFilial;
  IntegrarBPM.msgRetWsAlterarFilialNat = aMensagemWsAlterarFilialNat;

  aSearchStr = "sucesso";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarFilial, nPosicao);
  aSearchStr = "Registro já existe";
  PosicaoAlfa(aSearchStr, aMensagemWsAlterarFilialNat, nPosicaoExiste);
  Se (((nPosicao = 0) e (nPosicaoExiste = 0)) e (aMensagemWsAlterarFilialNat <> "")){
    IntegrarBPM.erroExecucao = aMensagemWsAlterarFilialNat;
  }
}


@-- Função para escalonamento salarial --@
Funcao fEscalonamentoSal();
{
  aEscalonamentoStr = IntegrarBPM.escalonamentoStr;
  aEscalonamentoStrAux = aEscalonamentoStr;
  nPosicao = 1;
  Enquanto (nPosicao <> 0){
    aSearchStr = "novas_datas_escalonadas_porcentagem=";
    PosicaoAlfa(aSearchStr, aEscalonamentoStrAux, nPosicao);
      
    Se (nPosicao <> 0){
      nPosicao = nPosicao + 35;
      DeletarAlfa(aEscalonamentoStrAux, 1, nPosicao);
      PosicaoAlfa(",", aEscalonamentoStrAux, nPosicao);
      aEscalonamentoStrAuxCopy = aEscalonamentoStrAux;
      CopiarAlfa(aEscalonamentoStrAuxCopy, 1, nPosicao - 1);
      aPorcentagem = aEscalonamentoStrAuxCopy;

      aSearchStr = "novas_datas_escalonadas_data=";
      PosicaoAlfa(aSearchStr, aEscalonamentoStrAux, nPosicao);
      nPosicao = nPosicao + 28;
      DeletarAlfa(aEscalonamentoStrAux, 1, nPosicao);
      PosicaoAlfa(",", aEscalonamentoStrAux, nPosicao);
      aEscalonamentoStrAuxCopy = aEscalonamentoStrAux;
      CopiarAlfa(aEscalonamentoStrAuxCopy, 1, nPosicao - 1);
      aAuxDat = aEscalonamentoStrAuxCopy;
      aDatAlt = aAuxDat;
      aAuxDat = aDatAlt;
      CopiarAlfa(aAuxDat, 1, 4);
      aAno = aAuxDat;
      aAuxDat = aDatAlt;
      CopiarAlfa(aAuxDat, 6, 2);
      aMes = aAuxDat;
      aAuxDat = aDatAlt;
      CopiarAlfa(aAuxDat, 9, 2);
      aDia = aAuxDat;
      AlfaParaInt(aAno, nAno);
      AlfaParaInt(aMes, nMes);
      AlfaParaInt(aDia, nDia);
      MontaData(nDia, nMes, nAno, dDatAlt);

      aSearchStr = "novas_datas_escalonadas_valor=";
      PosicaoAlfa(aSearchStr, aEscalonamentoStrAux, nPosicao);
      nPosicao = nPosicao + 29;
      DeletarAlfa(aEscalonamentoStrAux, 1, nPosicao);
      PosicaoAlfa("}", aEscalonamentoStrAux, nPosicao);
      aEscalonamentoStrAuxCopy = aEscalonamentoStrAux;
      CopiarAlfa(aEscalonamentoStrAuxCopy, 1, nPosicao - 1);
      aEscalValor = aEscalonamentoStrAuxCopy;
      TrocaString(aEscalValor, ".", ",", aEscalValor);
      AlfaParaInt(aEscalValor, nValSalAux);
      

      nValSal = nValSalAux;
      nCodMotSal = 13;

      aSearchStr = "novas_datas_escalonadas_porcentagem=";
      PosicaoAlfa(aSearchStr, aEscalonamentoStrAux, nPosicao);
      
      fCorrigirData();
      fAlterarSalario();

      nContador++;
    }
  }
}


@-- Função para buscar posto atual --@
Funcao fBuscarDadosAtuais();
{
  SQL_Criar(CUR_R034FUN);
  aSqlAux = "SELECT EstPos, PosTra, CodCcu, CodCar FROM R034FUN WHERE NumEmp = :nNumEmp AND NumCad = :nNumCad AND TipCol = :nTipCol";

  SQL_DefinirComando(CUR_R034FUN, aSqlAux);
  SQL_DefinirInteiro(CUR_R034FUN, "nNumEmp", nNumEmp);
  SQL_DefinirInteiro(CUR_R034FUN, "nNumCad", nNumCad);
  SQL_DefinirInteiro(CUR_R034FUN, "nTipCol", nTipCol);

  SQL_AbrirCursor(CUR_R034FUN);
  Enquanto (SQL_EOF(CUR_R034FUN) = 0) {
    SQL_DefinirInteiro(CUR_R034FUN, "EstPos", nEstPos);
    SQL_RetornarAlfa(CUR_R034FUN, "PosTra", aPosTraAtual);
    SQL_RetornarAlfa(CUR_R034FUN, "CodCcu", aCodCcuAtual);
    SQL_RetornarAlfa(CUR_R034FUN, "CodCar", aCodCarAtual);
    SQL_Proximo(CUR_R034FUN);
  }
}



@ Evanderson Pereira - CH 236378 - 21/04/2025 @
/*
Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "N") e (FinalizaPosição = "N"){
  Nenhuma alteração
}

Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "N") e (FinalizaPosição = "S"){
  Finaliza o posto com a data do sistema
}

Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "S") e (FinalizaPosição = "S"){
  Considerar primeira "Nova data" do escolanamento para encerramento do posto
}

Obs.: A opção de encerramento do posto, estará presente em todos os tipos de operação
- Promoção
- Enquadramento Salarial
- Mérito
- Mudança de Cargo
- Transferência

*/

@ Função para encerramento do posto @
Funcao fEncerraPosto();
{

  @ Confirma a busca dos dados @
  fEntrarDados();

  @ Busca o posto atual @
  fBuscarDadosAtuais(); 

  @ 1. Condição Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "N") e (FinalizaPosição = "N")@
  Se((aTipOpeBPM = "Promoção") e (aEscalonamento = "N") e (aExtPos = "N")){  
     @ Não realiza nenhuma ação @
     x=0;
  }

  @ 2. Condição Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "N") e (FinalizaPosição = "S")@
  Se((aTipOpeBPM = "Promoção") e (aEscalonamento = "N") e (aExtPos = "S")){  
    @ Irá apenas encerrar o posto com a data do sistema @
    ExecSql "UPDATE R017POS SET DATEXT = :dDatSis WHERE ESTPOS = :nEstPos AND POSTRA = :nPosTra";
  }

  @ 3. Condição Se(aTipOpeBPM = "Promoção") e (Escalonamneto = "N") e (FinalizaPosição = "S")@
  Se((aTipOpeBPM = "Promoção") e (aEscalonamento = "S") e (aExtPos = "S")){

    @Considerar primeira "Nova data" do escolanamento para encerramento do posto@
    ExecSql "UPDATE R017POS SET DATEXT = :dDatAlt WHERE ESTPOS = :nEstPos AND POSTRA = :nPosTra";
  }

  @ 4. Condição - Verifica se o posto deverá ser encerrado em todos os tipos de operação @
  Se(aExtPos = "S"){
    @ Irá apenas encerrar o posto com a data do sistema @
    ExecSql "UPDATE R017POS SET DATEXT = :dDatSis WHERE ESTPOS = :nEstPos AND POSTRA = :nPosTra";
 }

}